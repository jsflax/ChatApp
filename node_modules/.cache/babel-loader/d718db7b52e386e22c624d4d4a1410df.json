{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { usersCollection } from \".\";\n/**\n * The customer user object relative to our Stitch user that contains\n * extended profile information.\n * \n * @param id {String}\n * @param name {String}\n * @param defaultAvatarOrdinal {Number} 0-7\n * @param avatar {ByteArray}\n * @param channelsSubscribedTo {StringArray}\n */\n\nexport function User(_id, name, defaultAvatarOrdinal, avatar, channelsSubscribedTo) {\n  return {\n    _id: _id,\n    name: name,\n    defaultAvatarOrdinal: defaultAvatarOrdinal,\n    avatar: avatar,\n    channelsSubscribedTo: channelsSubscribedTo\n  };\n}\n\nvar UserObserver =\n/*#__PURE__*/\nfunction () {\n  function UserObserver() {\n    _classCallCheck(this, UserObserver);\n  }\n\n  _createClass(UserObserver, [{\n    key: \"onEvent\",\n    value: function onEvent(changeEvent) {}\n  }, {\n    key: \"configure\",\n    value: function () {\n      var _configure = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return usersCollection.watch();\n\n              case 2:\n                this.stream = _context.sent;\n                this.stream.onNext(this.onEvent);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function configure() {\n        return _configure.apply(this, arguments);\n      }\n\n      return configure;\n    }()\n  }, {\n    key: \"sync\",\n    value: function () {\n      var _sync = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(ids) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                usersCollection.find({\n                  _id: {\n                    $in: ids\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function sync(_x) {\n        return _sync.apply(this, arguments);\n      }\n\n      return sync;\n    }()\n  }]);\n\n  return UserObserver;\n}();\n\nexport function ChannelSubscription(_id, channelId, ownerId, deviceId, localTimestamp, remoteTimestamp) {\n  return {\n    _id: _id,\n    channelId: channelId,\n    ownerId: ownerId,\n    deviceId: deviceId,\n    localTimestamp: localTimestamp,\n    remoteTimestamp: remoteTimestamp\n  };\n}","map":{"version":3,"sources":["/Users/jasonflax/Development/ChatApp/src/models.js"],"names":["usersCollection","User","_id","name","defaultAvatarOrdinal","avatar","channelsSubscribedTo","UserObserver","changeEvent","watch","stream","onNext","onEvent","ids","find","$in","ChannelSubscription","channelId","ownerId","deviceId","localTimestamp","remoteTimestamp"],"mappings":";;;;AAAA,SAASA,eAAT,QAAgC,GAAhC;AAEA;;;;;;;;;;;AAUA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,oBAAzB,EAA+CC,MAA/C,EAAuDC,oBAAvD,EAA6E;AACnF,SAAO;AACNJ,IAAAA,GAAG,EAAHA,GADM;AACDC,IAAAA,IAAI,EAAJA,IADC;AACKC,IAAAA,oBAAoB,EAApBA,oBADL;AAC2BC,IAAAA,MAAM,EAANA,MAD3B;AACmCC,IAAAA,oBAAoB,EAApBA;AADnC,GAAP;AAGA;;IAEKC,Y;;;;;;;;;4BACGC,W,EAAa,CAEpB;;;;;;;;;;;;uBAGoBR,eAAe,CAACS,KAAhB,E;;;AAApB,qBAAKC,M;AACL,qBAAKA,MAAL,CAAYC,MAAZ,CAAmB,KAAKC,OAAxB;;;;;;;;;;;;;;;;;;;;;iDAGUC,G;;;;;AACVb,gBAAAA,eAAe,CAACc,IAAhB,CAAqB;AAACZ,kBAAAA,GAAG,EAAE;AAAEa,oBAAAA,GAAG,EAAEF;AAAP;AAAN,iBAArB;;;;;;;;;;;;;;;;;;;;;AAIF,OAAO,SAASG,mBAAT,CAA6Bd,GAA7B,EAAkCe,SAAlC,EAA6CC,OAA7C,EAAsDC,QAAtD,EAAgEC,cAAhE,EAAgFC,eAAhF,EAAiG;AACvG,SAAO;AACNnB,IAAAA,GAAG,EAAHA,GADM;AACDe,IAAAA,SAAS,EAATA,SADC;AACUC,IAAAA,OAAO,EAAPA,OADV;AACmBC,IAAAA,QAAQ,EAARA,QADnB;AAC6BC,IAAAA,cAAc,EAAdA,cAD7B;AAC6CC,IAAAA,eAAe,EAAfA;AAD7C,GAAP;AAGA","sourcesContent":["import { usersCollection } from \".\";\n\n/**\n * The customer user object relative to our Stitch user that contains\n * extended profile information.\n * \n * @param id {String}\n * @param name {String}\n * @param defaultAvatarOrdinal {Number} 0-7\n * @param avatar {ByteArray}\n * @param channelsSubscribedTo {StringArray}\n */\nexport function User(_id, name, defaultAvatarOrdinal, avatar, channelsSubscribedTo) {\n\treturn {\n\t\t_id, name, defaultAvatarOrdinal, avatar, channelsSubscribedTo\n\t};\n}\n\nclass UserObserver {\n\tonEvent(changeEvent) {\n\n\t}\n\n\tasync configure() {\n\t\tthis.stream = await usersCollection.watch()\n\t\tthis.stream.onNext(this.onEvent);\n\t}\n\n\tasync sync(ids) {\n\t\tusersCollection.find({_id: { $in: ids }});\n\t}\n}\n\nexport function ChannelSubscription(_id, channelId, ownerId, deviceId, localTimestamp, remoteTimestamp) {\n\treturn {\n\t\t_id, channelId, ownerId, deviceId, localTimestamp, remoteTimestamp \n\t};\n}\n"]},"metadata":{},"sourceType":"module"}