{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jasonflax/Development/ChatApp/src/components/ChatFeed.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  display: flex;\\n  flex-direction: column;\\n  padding: 10px 14px;\\n  box-sizing: border-box;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  flex-grow: 1;\\n  box-sizing: border-box;\\n  overflow-y: scroll;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx */\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport ChatMessage from \"./ChatMessage.js\";\nimport { animateScroll as scroll } from \"react-scroll\";\nvar USER = {\n  id: \"20391029481029849124\",\n  profile: {\n    firstName: \"Jessica\",\n    lastName: \"Real\"\n  }\n};\n\nvar ChatFeed = function ChatFeed(props) {\n  var messages = props.messages;\n  useEffect(function () {\n    scroll.scrollToBottom({\n      containerId: \"feed\",\n      duration: 320,\n      delay: 40\n    });\n  }, [messages]);\n\n  var isFromCurrentUser = function isFromCurrentUser(message) {\n    return !!message && message.from.id === USER.id;\n  };\n\n  return jsx(ChatFeedLayout, {\n    id: \"feed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, jsx(Feed, {\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, messages.map(function (m, i) {\n    var isFirst = i === 0;\n    var isLast = i === messages.length - 1;\n    var prevIsFromCurrentUser = isFromCurrentUser(messages[i - 1]) || false;\n    var nextIsFromCurrentUser = isFromCurrentUser(messages[i + 1]) || false;\n    var isFirstFromUser = isFirst || isFromCurrentUser(m) ? !prevIsFromCurrentUser : prevIsFromCurrentUser;\n    var isLastFromUser = isLast || isFromCurrentUser(m) ? !nextIsFromCurrentUser : nextIsFromCurrentUser;\n    return jsx(ChatMessage, {\n      key: m.ts,\n      message: m,\n      isFromCurrentUser: isFromCurrentUser(m),\n      noHeader: !isFirstFromUser,\n      isFirstFromUser: isFirstFromUser,\n      isLastFromUser: isLastFromUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default ChatFeed;\nvar ChatFeedLayout = styled.div(_templateObject());\nvar Feed = styled.div(_templateObject2());","map":{"version":3,"sources":["/Users/jasonflax/Development/ChatApp/src/components/ChatFeed.js"],"names":["React","useRef","useState","useEffect","css","jsx","styled","ChatMessage","animateScroll","scroll","USER","id","profile","firstName","lastName","ChatFeed","props","messages","scrollToBottom","containerId","duration","delay","isFromCurrentUser","message","from","map","m","i","isFirst","isLast","length","prevIsFromCurrentUser","nextIsFromCurrentUser","isFirstFromUser","isLastFromUser","ts","ChatFeedLayout","div","Feed"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,cAAxC;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,EAAE,EAAE,sBADO;AAEXC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,SADJ;AAEPC,IAAAA,QAAQ,EAAE;AAFH;AAFE,CAAb;;AAQA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAAA,MAChBC,QADgB,GACHD,KADG,CAChBC,QADgB;AAExBd,EAAAA,SAAS,CACP,YAAM;AACJM,IAAAA,MAAM,CAACS,cAAP,CAAsB;AACpBC,MAAAA,WAAW,EAAE,MADO;AAEpBC,MAAAA,QAAQ,EAAE,GAFU;AAGpBC,MAAAA,KAAK,EAAE;AAHa,KAAtB;AAKD,GAPM,EAQP,CAACJ,QAAD,CARO,CAAT;;AAUA,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,OAAO,EAAI;AACnC,WAAO,CAAC,CAACA,OAAF,IAAaA,OAAO,CAACC,IAAR,CAAab,EAAb,KAAoBD,IAAI,CAACC,EAA7C;AACD,GAFD;;AAGA,SACE,IAAC,cAAD;AAAgB,IAAA,EAAE,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,IAAC,IAAD;AAAM,IAAA,QAAQ,EAAEM,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QAAQ,CAACQ,GAAT,CAAa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACtB,QAAMC,OAAO,GAAGD,CAAC,KAAK,CAAtB;AACA,QAAME,MAAM,GAAGF,CAAC,KAAKV,QAAQ,CAACa,MAAT,GAAkB,CAAvC;AACA,QAAMC,qBAAqB,GACzBT,iBAAiB,CAACL,QAAQ,CAACU,CAAC,GAAG,CAAL,CAAT,CAAjB,IAAsC,KADxC;AAEA,QAAMK,qBAAqB,GACzBV,iBAAiB,CAACL,QAAQ,CAACU,CAAC,GAAG,CAAL,CAAT,CAAjB,IAAsC,KADxC;AAEA,QAAMM,eAAe,GACnBL,OAAO,IAAIN,iBAAiB,CAACI,CAAD,CAA5B,GACI,CAACK,qBADL,GAEIA,qBAHN;AAIA,QAAMG,cAAc,GAClBL,MAAM,IAAIP,iBAAiB,CAACI,CAAD,CAA3B,GACI,CAACM,qBADL,GAEIA,qBAHN;AAIA,WACE,IAAC,WAAD;AACE,MAAA,GAAG,EAAEN,CAAC,CAACS,EADT;AAEE,MAAA,OAAO,EAAET,CAFX;AAGE,MAAA,iBAAiB,EAAEJ,iBAAiB,CAACI,CAAD,CAHtC;AAIE,MAAA,QAAQ,EAAE,CAACO,eAJb;AAKE,MAAA,eAAe,EAAEA,eALnB;AAME,MAAA,cAAc,EAAEC,cANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAzBA,CADH,CADF,CADF;AAgCD,CA/CD;;AAgDA,eAAenB,QAAf;AAEA,IAAMqB,cAAc,GAAG9B,MAAM,CAAC+B,GAAV,mBAApB;AAMA,IAAMC,IAAI,GAAGhC,MAAM,CAAC+B,GAAV,oBAAV","sourcesContent":["/** @jsx jsx */\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport ChatMessage from \"./ChatMessage.js\";\nimport { animateScroll as scroll } from \"react-scroll\";\n\nconst USER = {\n  id: \"20391029481029849124\",\n  profile: {\n    firstName: \"Jessica\",\n    lastName: \"Real\",\n  },\n};\n\nconst ChatFeed = props => {\n  const { messages } = props;\n  useEffect(\n    () => {\n      scroll.scrollToBottom({\n        containerId: \"feed\",\n        duration: 320,\n        delay: 40,\n      });\n    },\n    [messages],\n  );\n  const isFromCurrentUser = message => {\n    return !!message && message.from.id === USER.id;\n  };\n  return (\n    <ChatFeedLayout id=\"feed\">\n      <Feed messages={messages}>\n        {messages.map((m, i) => {\n          const isFirst = i === 0;\n          const isLast = i === messages.length - 1;\n          const prevIsFromCurrentUser =\n            isFromCurrentUser(messages[i - 1]) || false;\n          const nextIsFromCurrentUser =\n            isFromCurrentUser(messages[i + 1]) || false;\n          const isFirstFromUser =\n            isFirst || isFromCurrentUser(m)\n              ? !prevIsFromCurrentUser\n              : prevIsFromCurrentUser;\n          const isLastFromUser =\n            isLast || isFromCurrentUser(m)\n              ? !nextIsFromCurrentUser\n              : nextIsFromCurrentUser;\n          return (\n            <ChatMessage\n              key={m.ts}\n              message={m}\n              isFromCurrentUser={isFromCurrentUser(m)}\n              noHeader={!isFirstFromUser}\n              isFirstFromUser={isFirstFromUser}\n              isLastFromUser={isLastFromUser}\n            />\n          );\n        })}\n      </Feed>\n    </ChatFeedLayout>\n  );\n};\nexport default ChatFeed;\n\nconst ChatFeedLayout = styled.div`\n  width: 100%;\n  flex-grow: 1;\n  box-sizing: border-box;\n  overflow-y: scroll;\n`;\nconst Feed = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 10px 14px;\n  box-sizing: border-box;\n`;\n"]},"metadata":{},"sourceType":"module"}