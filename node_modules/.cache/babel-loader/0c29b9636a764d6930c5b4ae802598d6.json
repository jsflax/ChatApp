{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jasonflax/Development/ChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jasonflax/Development/ChatApp/src/components/ChatRoom.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  height: 100vh;\\n  max-height: 100vh;\\n  background-color: white;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx */\nimport React from \"react\";\nimport { jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport ChatFeed from \"./ChatFeed\";\nimport ChatBar from \"./ChatBar\";\nimport { channelSubscriptionObserver, channelMessageObserver, ChannelMessage } from \"../models\";\nimport { client, channelMessagesCollection } from \"..\";\nimport { ObjectId } from \"bson\";\nimport { BSON } from \"mongodb-stitch-core-sdk\";\n/* This component manages the state of the entire chat room.\n * NOTE: Requires a logged in Stitch user\n */\n\nvar ChatRoom =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChatRoom, _React$Component);\n\n  _createClass(ChatRoom, [{\n    key: \"configureCollections\",\n    value: function () {\n      var _configureCollections = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var subscriptionId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                channelMessageObserver.subscribe(function (event) {\n                  _this2.state.messages.push(event.fullDocument);\n\n                  _this2.setState(_this2.state);\n                });\n                _context.next = 3;\n                return client.callFunction(\"subscribeToChannel\", [client.auth.user.id, new ObjectId().toHexString, \"default\"]);\n\n              case 3:\n                subscriptionId = _context.sent;\n                channelSubscriptionObserver.sync(subscriptionId);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function configureCollections() {\n        return _configureCollections.apply(this, arguments);\n      }\n\n      return configureCollections;\n    }()\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(text) {\n        var msg;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                msg = ChannelMessage(new BSON.ObjectId(), client.auth.user.id, \"default\", text, Date.now(), undefined);\n                _context2.next = 3;\n                return channelMessagesCollection.insertOne(msg);\n\n              case 3:\n                this.state.messages.push(msg);\n                this.setState(this.state);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n  }]);\n\n  function ChatRoom(props) {\n    var _this;\n\n    _classCallCheck(this, ChatRoom);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatRoom).call(this, props));\n    _this.state = {\n      isLoading: false,\n      messages: [],\n      messageText: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ChatRoom, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.configureCollections();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // const [isLoading, setIsLoading] = useState(true);\n      // const [messages, setMessages] = useState([]);\n      // const [messageText, setMessageText] = useState(\"\");\n      // useEffect(() => {\n      //   // Set up the collection watch stream\n      //   // TODO: Need to know the document structure\n      //   this.state.setMessages(MESSAGES);\n      //   this.state.setIsLoading(false);\n      // }, []);\n      return jsx(ChatLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, jsx(ChatFeed, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), jsx(ChatBar, {\n        sendMessage: function sendMessage(text) {\n          return _this3.sendMessage(text);\n        },\n        setMessageText: function setMessageText(txt) {\n          _this3.state.messageText = txt;\n\n          _this3.setState(_this3.state);\n        },\n        messageText: this.state.messageText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatRoom;\n}(React.Component);\n\nexport { ChatRoom as default };\nvar ChatLayout = styled.div(_templateObject());","map":{"version":3,"sources":["/Users/jasonflax/Development/ChatApp/src/components/ChatRoom.js"],"names":["React","jsx","styled","ChatFeed","ChatBar","channelSubscriptionObserver","channelMessageObserver","ChannelMessage","client","channelMessagesCollection","ObjectId","BSON","ChatRoom","subscribe","event","state","messages","push","fullDocument","setState","callFunction","auth","user","id","toHexString","subscriptionId","sync","text","msg","Date","now","undefined","insertOne","props","isLoading","messageText","configureCollections","sendMessage","txt","Component","ChatLayout","div"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,2BAAT,EAAsCC,sBAAtC,EAA8DC,cAA9D,QAAoF,WAApF;AACA,SAASC,MAAT,EAAiBC,yBAAjB,QAAkD,IAAlD;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,IAAT,QAAqB,yBAArB;AAEA;;;;IAGqBC,Q;;;;;;;;;;;;;;;;;;AAEjBN,gBAAAA,sBAAsB,CAACO,SAAvB,CAAiC,UAAAC,KAAK,EAAI;AACxC,kBAAA,MAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBH,KAAK,CAACI,YAA/B;;AACA,kBAAA,MAAI,CAACC,QAAL,CAAc,MAAI,CAACJ,KAAnB;AACD,iBAHD;;uBAI6BP,MAAM,CAACY,YAAP,CAAoB,oBAApB,EAA0C,CACrEZ,MAAM,CAACa,IAAP,CAAYC,IAAZ,CAAiBC,EADoD,EAErE,IAAIb,QAAJ,GAAec,WAFsD,EAGrE,SAHqE,CAA1C,C;;;AAAvBC,gBAAAA,c;AAMNpB,gBAAAA,2BAA2B,CAACqB,IAA5B,CAAiCD,cAAjC;;;;;;;;;;;;;;;;;;;;;iDAGgBE,I;;;;;;AACVC,gBAAAA,G,GAAMrB,cAAc,CAAC,IAAII,IAAI,CAACD,QAAT,EAAD,EAAsBF,MAAM,CAACa,IAAP,CAAYC,IAAZ,CAAiBC,EAAvC,EAA2C,SAA3C,EAAsDI,IAAtD,EAA4DE,IAAI,CAACC,GAAL,EAA5D,EAAwEC,SAAxE,C;;uBACpBtB,yBAAyB,CAACuB,SAA1B,CAAoCJ,GAApC,C;;;AACN,qBAAKb,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBW,GAAzB;AACA,qBAAKT,QAAL,CAAc,KAAKJ,KAAnB;;;;;;;;;;;;;;;;;;AAGF,oBAAYkB,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,UAAKlB,KAAL,GAAa;AACXmB,MAAAA,SAAS,EAAE,KADA;AAEXlB,MAAAA,QAAQ,EAAE,EAFC;AAGXmB,MAAAA,WAAW,EAAE;AAHF,KAAb;AAFiB;AAOlB;;;;wCAEmB;AAClB,WAAKC,oBAAL;AACD;;;6BAEQ;AAAA;;AACP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,aAAO,IAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACL,IAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,EAEL,IAAC,OAAD;AACE,QAAA,WAAW,EAAE,qBAAAW,IAAI;AAAA,iBAAI,MAAI,CAACU,WAAL,CAAiBV,IAAjB,CAAJ;AAAA,SADnB;AAEE,QAAA,cAAc,EAAE,wBAACW,GAAD,EAAS;AACvB,UAAA,MAAI,CAACvB,KAAL,CAAWoB,WAAX,GAAyBG,GAAzB;;AACA,UAAA,MAAI,CAACnB,QAAL,CAAc,MAAI,CAACJ,KAAnB;AACD,SALH;AAME,QAAA,WAAW,EAAE,KAAKA,KAAL,CAAWoB,WAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFK,CAAP;AAWD;;;;EA1DmCnC,KAAK,CAACuC,S;;SAAvB3B,Q;AA4DrB,IAAM4B,UAAU,GAAGtC,MAAM,CAACuC,GAAV,mBAAhB","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport { jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\n\nimport ChatFeed from \"./ChatFeed\";\nimport ChatBar from \"./ChatBar\";\nimport { channelSubscriptionObserver, channelMessageObserver, ChannelMessage } from \"../models\";\nimport { client, channelMessagesCollection } from \"..\";\nimport { ObjectId } from \"bson\";\nimport { BSON } from \"mongodb-stitch-core-sdk\";\n\n/* This component manages the state of the entire chat room.\n * NOTE: Requires a logged in Stitch user\n */\nexport default class ChatRoom extends React.Component {\n  async configureCollections() {\n    channelMessageObserver.subscribe(event => {\n      this.state.messages.push(event.fullDocument);\n      this.setState(this.state);\n    });\n    const subscriptionId = await client.callFunction(\"subscribeToChannel\", [\n      client.auth.user.id, \n      new ObjectId().toHexString, \n      \"default\"\n    ]);\n\n    channelSubscriptionObserver.sync(subscriptionId);\n  }\n\n  async sendMessage(text) {\n    const msg = ChannelMessage(new BSON.ObjectId(), client.auth.user.id, \"default\", text, Date.now(), undefined);\n    await channelMessagesCollection.insertOne(msg);\n    this.state.messages.push(msg);\n    this.setState(this.state);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      messages: [],\n      messageText: \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.configureCollections();\n  }\n\n  render() {\n    // const [isLoading, setIsLoading] = useState(true);\n    // const [messages, setMessages] = useState([]);\n    // const [messageText, setMessageText] = useState(\"\");\n\n    // useEffect(() => {\n    //   // Set up the collection watch stream\n    //   // TODO: Need to know the document structure\n    //   this.state.setMessages(MESSAGES);\n    //   this.state.setIsLoading(false);\n    // }, []);\n    \n    return <ChatLayout>\n      <ChatFeed messages={this.state.messages} />\n      <ChatBar\n        sendMessage={text => this.sendMessage(text)}\n        setMessageText={(txt) => {\n          this.state.messageText = txt\n          this.setState(this.state)\n        }}\n        messageText={this.state.messageText}\n      />\n    </ChatLayout>;\n  }\n}\nconst ChatLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100vh;\n  max-height: 100vh;\n  background-color: white;\n`;\n"]},"metadata":{},"sourceType":"module"}